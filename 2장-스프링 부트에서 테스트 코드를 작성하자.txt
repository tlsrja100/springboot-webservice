http://bit.ly/fr-springboot

※ 개발환경
- Java 11
- Gradle 4.8 ~ Gradle 4.10.2
----------------------------------------------------------------------------------------------------------------------------------------------

※ 테스트 코드를 작성해야 하는 이유
- 단위 테스트는 개발단계 초기에 문제를 발견하게 도와줍니다.
- 단위 테스트는 개발자가 나중에 코드를 리팩토링하거나 라이브러리 업그레이드 등에서 기존 기능이 올바르게 작동하는지 확인할 수 있습니다.
- 단위 테스트는 기능에 대한 불확실성을 감소시킬 수 있습니다.
- 단위 테스트는 시스템에 대한 실제 문서를 제공합니다. 즉, 단위 테스트 자체가 문서로 사용할 수 있습니다.

----------------------------------------------------------------------------------------------------------------------------------------------

※ 테스트 코드에 대한 필자의 생각
가장 먼저 빠른 피드백이 있습니다. 필자가 단위 테스트를 배우기 전에 진행한 개발 방식은 다음과 같습니다.
1. 코드를 작성하고
2. 프로그램을 실행한 뒤
3. Postman과 같은 API 테스트 도구로 HTTP 요청하고
4. 요청 결과를 System.out.println()으로 눈으로 검증합니다.
5. 결과가 다르면 다시 프로그램(Tomcat)을 중지하고 코드를 수정합니다.
여기서 2~5 는 매번 코드를 수정할 때마다 반복해야만 합니다.
왜 계속 톰캣을 내렸다가 다시 실행하는 일을 반복해야 할까요? 이는 테스트 코드가 없다 보니 눈과 손으로 직접 수정된 기능을 확인할 수 밖에 없기 때문 입니다. 테스트 코드를 작성하면 이런 문제가 해결되므로 굳이 손으로 직접 톰캣을 계속 올렸다 내렸다 할 필요가 없습니다.

두번째는 System.out.println()을 통해 눈으로 검증해야 하는 문제입니다. 테스트 코드를 작성하면 더는 사람이 눈으로 검증하지 않게 자동검증이 가능합니다. 작성된 단위 테스트를 실행만 하면 더는 수동검증은 필요 없게 되는 것입니다.

세 번째로 개발자가 만든 기능을 안전하게 보호해 줍니다.
예를 들어 B라는 기능이 추가되어 테스트 합니다. B 기능이 잘 되어 오픈했더니 기존에 잘되던 A 기능에 문제가 생긴 것을 발견합니다.
이런 문제는 규모가 큰 서비스에서는 빈번하게 발생하는 일입니다. 하나의 기능을 추가할 때마다 너무나 많은 자원이 들기 때문에 서비스의 모든 기능을 테스트 할 수는 없습니다.
이렇게 새로운 기능이 추가될 때, 기존 기능이 잘 작동되는 것을 보장해 주는 것이 테스트 코드 입니다. 

----------------------------------------------------------------------------------------------------------------------------------------------

p.57
Application 클래스는 앞으로 만들 프로젝트의 메인 클래스가 됩니다.
@SpringBootApplication으로 인해 스프링 부트의 자동 설정, 스프링 Bean 읽기와 생성을 모두 자동으로 설정됩니다. 특히나 @SpringBootApplication이 있는 위치부터 설정을 읽어가기 때문에 이 클래스는 항상 프로젝트의 최상단에 위치해야만 합니다.
main 메소드에서 실행하는 SpringApplication.run으로 인해 내장 WAS (Web Application Server, 웹 애플리케이션 서버)를 실행합니다. 내장 WAS란 별도로 외부에 WAS를 두지 않고 애플리케이션을 실행할 때 내부에서 WAS를 실행하는 것을 이야기합니다. 이렇게 되면 항상 서버에 톰캣을 설치할 필요가 없게 되고, 스프링 부트로 만들어진 Jar 파일로 실행하면 됩니다.

----------------------------------------------------------------------------------------------------------------------------------------------

@RestController 
- 컨트롤러를 JSON을 반환하는 컨트롤러로 만들어 줍니다.
- 각 메소드에 @ReponseBody를 선언하지 않고 한번에 사용할 수 있게 해줌

@GetMapping
- HTTP Method 인 Get의 요청을 받을 수 있는 API를 만들어 줍니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.62 test controller에 사용한 어노테이션과 객체 설명
@RunWith(SpringRunner.class)
- 테스트를 진행할 때 JUnit에 내장된 실행자 외에 다른 실행자를 실행시킵니다.
- 여기서는 SpringRunner라는 스프링 실행자를 사용합니다.
- 즉, 스프링 부트 테스트와 JUnit 사이에 연결자 역할을 합니다.

@WebMvcTest
- 여러 스프링 테스트 어노테이션 중, Web(Spring MVC)에 집중할 수 있는 어노테이션 입니다.
- 선언할 경우 @Controller, @ControllerAdvice 등을 사용할 수 있습니다.
- 단, @Service, @Component, @repository 등은 사용할 수 없습니다.
- 여기서는 컨트롤러만 사용하기 때문에 선언합니다.

@Autowired
- 스프링이 관리하는 빈을 주입 받습니다.

private MockMvc mvc
- 웹 API를 테스트할 때 사용합니다.
- 스프링 MVC 테스트의 시작점입니다.
- 이 클래스를 통해 HTTP GET, POST 등에 대한 API 테스트를 할 수 있습니다.

mvc.perform(get("/hello"))
- MockMvc를 통해 /hello 주소로 HTTP GET 요청을 합니다.
- 체이닝이 지원되어 아래와 같이 여러 검증 기능을 이어서 선언할 수 있습니다.

.andExpect(status().isOk())
- mvc.perform 의 결과를 검증합니다.
- HTTP Header의 Status를 검증합니다.
- 우리가 흔히 알고 있는 200, 404, 500 등의 상태를 검증합니다.
- 여기선 OK 즉, 200인지 아닌지를 검증합니다.

.andExpect(content().spring(hello))
- mvc.perform의 결과를 검증합니다.
- 응답 본문의 내용을 검증합니다.
- controller에서 "hello"를 리턴하기 때문에 이 값이 맞는지 검증합니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.72 lombok 어노테이션
@Getter
- 선언된 모든 필드의 get 메소드를 생성해 줍니다.

@RequiredArgsConstructor
- 선언된 모든 final 필드가 포함된 생성자를 생성해 줍니다.
- final 이 없는 필드는 생성자에 포함되지 않습니다.


p.73 dto test 
1. assertThat
- assertj라는 테스트 검증 라이브러리의 검증 메소드입니다.
- 검증하고 싶은 대상을 메소드 인자로 받습니다.
- 메소드 체이닝이 지원되어 isEqualTo와 같이 메소드를 이어서 사용할 수 있습니다.
2. isEqualTo
- assertj의 동등 비교 메소드 입니다.
- assertThat에 있는 값과 isEqualTo의 값을 비교해서 같을 때만 성공입니다.

----------------------------------------------------------------------------------------------------------------------------------------------

P.75 HelloController 에 HelloResponseDto 사용
@RequestParam
- 외부에서 API 로 넘긴 파라미터를 가져오는 어노테이션 입니다.
- 여기서는 외부에서 name(@RequestParam("name")) 이란 이름으로 넘긴 파라미터를 메소드 파라미터 name(String name)에 저장하게 됩니다.

p.77 HelloControllerTest 에있는 Dto 부분 객체사용
 param
 - API 테스트할 때 사용될 요청 파라미터를 설정합니다.
 - 단, 값은 String만 허용됩니다.
 - 그래서 숫자/날짜 등의 데이터도 등록할 때는 문자열로 변경해야만 가능합니다.
        
 jsonPath
 - jSON 응답값을 필드별로 검증할 수 있는 메소드입니다.
 - $를 기준으로 필드명을 명시합니다.
 - 여기서는 name과 amount를 검증하니 $.name, $.amount로 검증합니다.





----------------------------------------------------------------------------------------------------------------------------------------------