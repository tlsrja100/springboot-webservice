http://bit.ly/fr-springboot

※ 개발환경
- Java 11
- Gradle 4.8 ~ Gradle 4.10.2
----------------------------------------------------------------------------------------------------------------------------------------------

p.178 로그인 연동 Entity 클래스

@Enumerated(EnumType.STRING)
- JPA로 데이터베이스로 저장할 때 Enum 값을 어떤 형태로 저장할지를 결정합니다.
- 기본적으로 int로 된 숫자가 저장됩니다.
- 숫자로 저장되면 데이터베이스로 확인할 때 그 값이 무슨 코드를 의미하는지 알 수가 없습니다.
- 그래서 문자열(EnumType.STRING)로 저장될 수 있도록 선언합니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.179 로그인 연동 UserRepository 클래스

finalByEmail 
- 소셜 로그인으로 반환되는 값 중 email을 통해 이미 생성된 사용자인지 처음 가입하는 사용자인지 판단하기 위한 메소드입니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.181 Spring Security config 클래스

@EnableWebSecurity
- Spring Security 설저을을 활성화시켜 줍니다.

csrf().disable().headers().franeOptions().disable()
- h2-console 화면을 사용하기 위해 해당 옵션들을 disable 합니다.

authorizeRequests
- URL 별 권한 관리를 설정하는 옵션의 시작점입니다.
- authorizeRequests가 선언되어야만 antMatchers 옵션을 사용할 수 있습니다.

antMatchers
- 권한 관리 대상을 지정하는 옵션입니다.
- URL, HTTP 메소드별로 관리가 가능합니다.
- "/" 등 지정된 URL들은 permitAll()옵션을 통해 전체 열람 권한을 주었습니다.
- "/api/v1/**" 주소를 가진 API는 USER 권한을 가진 사람만 가능하도록 했습니다.

anyRequest
- 설정된 값들 이외 나머지 URL들을 나타냅니다.
- 여기서는 authenticated()을 추가하여 나머지 URL 들은 모두 인증된 사용자들에게만 허용하게 합니다.
- 인증된 사용자 즉, 로그인한 사용자들을 이야기 합니다.

logout().logoutSuccessURL("/")
- 로그아웃 기능에 대한 여러 설정의 진입점입니다.
- 로그아웃 성공 시 / 주소로 이동합니다.

oauth2Login
- OAuth 2 로그인 기능에 대한 여러 설정의 진입점입니다.

userInfoEndpoint
- OAuth 2 로그인 성공 이후 사용자 정보를 가져올 때의 설정들을 담당합니다.

userService
- 소셜 로그인 성공 시 후속 조치를 진행할 UserService 인터페이스의 구현체를 등록합니다.
- 리소스 서버(즉, 소셜 서비스들)에서 사용자 정보를 가져온 상태에서 추가로 진행하고자 하는 기능을 명시할 수 있습니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p. 182 CustomOAuth2UserService 클래스 ( 구글 로그인 이후 가져온 사용자의 정보 (email, name, picture 등) 들을 기반으로 가입 및 정보수정, 세션 저장 등의 기능을 지원 )

registratinId
- 현재 로그인 진행 중인 서비스를 구분하는 코드 입니다.
- 지금은 구글만 사용하는 불필요한 값이지만, 이후 네이버 로그인 연동 시에 네이버로그인인지, 구글 로그인인지 구분하기 위해 사용합니다

userNameAttributeName
- OAuth2 로그인 진행 시 키가 되는 필드값을 이야기합니다. Primary Key와 같은 의미입니다.
- 구글의 경우 기본적으로 코드를 지원하지만, 네이버 카카오 등은 기본 지원하지 않습니다. 구글의 기본 코드는 "sub" 입니다.
- 이후 네이버 로그인과 구글 로그인을 동시 지원할 때 사용됩니다.

OAuthAttributes
- OAuth2UserService를 통해 가져온 OAuth2User의 attribute를 담을 클래스입니다.
- 이후 네이버 등 다른 소셜 로그인도 이 클래스를 사용합니다.

SessionUser
- 세션에 사용자 정보를 저장하기 위한 Dto 클래스 입니다.

----------------------------------------------------------------------------------------------------------------------------------------------

 p.186 OAuthAttributes 클래스

of()
- OAuth2User에서 반환하는 사용자 정보는 Map 이기 때문에 값 하나하나를 변환해야만 합니다.

toEntity()
- User엔티티를 생성합니다.
- OAuthAttributes에서 엔티티를 생성하는 시점은 처음 가입할 때입니다.
- 가입할 때의 기본 권한을 GUEST로 주기 위해서 role 빌더값에는 Role.GUEST를 사용합니다.
- OAuthAttributes 클래스 생성이 끝났으면 같은 패키지에 SessionUser클래스를 생성합니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.191 IndexController 

(SessionUser) httpSession.getAttribute("user")
- 앞서 작성된 CustomOAuth2UserService에서 로그인 성공 시 세션에 SessionUser를 저장하도록 구성
- 즉, 로그인 성공 시 httpSession.getAttribute("user")에서 값을 가져올 수 있습니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p. 195 LoginUser 클래스 (IndexController에 세션값을 가져오는 부분에서 다른 컨트롤러나 메소드에서 Session값이 필요할때 반복해서 작성하지 않게 하기 위해 이 부분을 메소드 인자로 세션값을 바로 받을수 있도록 변경 하는 작업)

@Target(ElementType.PARAMETER)
- 이 어노테이션이 생성될 수 있는 위치를 지정합니다.
- PARAMETER로 지정했으니 메소드의 파라미터로 선언된 객체에서만 사용할 수 있습니다.
- 이 외에도 클래스 선언문에 쓸 수 있는 TYPE 등이 있다.

@interface
- 이 파일을 어노테이션 클래스로 지정
- LoginUser라는 이름을 가진 어노테이션이 생성되었다라고 보면 된다.

----------------------------------------------------------------------------------------------------------------------------------------------

p. 197 LoginUserArgumentResolver 클래스 ( HandlerMethodArgumentResolver 인터페이스를 구현한 클래스  HandlerMethodArgumentResolver 는 한가지 기능을 지원한다. 바로 조건에 맞는 경우 메소드가 있다면 HandlerMethodArgumentResolver의 구현체가 지정한 값으로 해당 메소드의 파라미터로 넘길 수 있다. )

supportsParameter()
- 컨트롤러 메서드의 특정 파라미터를 지원하는지 판단합니다.
- 여기서는 파라미터에 @LoginUser 어노테이션이 붙어 있고, 파라미터 클래스 타입이 SessionUser.class 인 경우 true 를 반환합니다.

resolveArgument()
- 파라미터에 전달할 객체를 생성합니다.
- 여기서는 세션에서 객체를 가져옵니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p. 199 IndexController 코드에 @LoginUser 어노테이션 추가
@LoginUser SessionUser user
- 기존에 (User) httpSession.getAttribute("user") 로 가져오던 세션 정보 값이 개선 되었습니다.
- 이제는 어느 컨트롤러든지 @LoginUser만 사용하면 세션 정보를 가져올 수 있게 되었습니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p. 216 PostsApiControllerTest 임의 사용자 인증 추가
@WithMockUser(roles="USER")
- 인증된 모의 사용자를 만들어서 사용
- roles에 군한을 추가할 수 있습니다.
- 즉, 이 어노테이션으로 인해 ROLE_USER 권한을 가진 사용자가 API를 요청하는것과 동일한 효과를 가지게 됩니다.

----------------------------------------------------------------------------------------------------------------------------------------------
