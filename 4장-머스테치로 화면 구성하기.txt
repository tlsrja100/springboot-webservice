http://bit.ly/fr-springboot

※ 개발환경
- Java 11
- Gradle 4.8 ~ Gradle 4.10.2

----------------------------------------------------------------------------------------------------------------------------------------------

머스테치 스타터 의존성을 build.gradle에 등록
implementation('org.springframework.boot:spring-boot-starter-mustache')

----------------------------------------------------------------------------------------------------------------------------------------------

템플릿 엔진
- 일반적으로 웹 개발에 있어 템플릿 엔진이란, ◆지정된 템플릿 양식과 데이터◆가 합쳐져 HTML 문서를 출력하는 소프트웨어를 이야기 합니다. 예전에 스프링이나 서블릿을 사용해 본 독자들은 아마도 JSP, freemarker 등을 떠올리실 테고, 요즘 개발을 시작하는 독자들은 리액트,뷰의 View 파일들을 떠올릴거다.
둘 모두 결과적으로 ◆지정된 템플릿과 데이터◆ 를 이용하여 HTML을 생성 하는 템플릿 엔진입니다.
 * 웹 사이트의 화면을 어떤 형태로 만들지 도와주는 양식 이라고 이해하면 편하다

자바스크립트에서 JSP나 Freemarker처럼 자바 코드를 사용할 순 없나요?
$(document).ready(function() {
      if(a=="1") {
      <%
	System.out.println("test");
       %>
       }
});

이 코드는 if문과 관계없이 무조건 test를 콘솔에 출력합니다. 이유는 프론트엔드의 자바스크립트가 작동하는 영역과 JSP가 작동하는 영역이 다르기 때문인데 JSP를 비롯한 서버 템플릿 엔진은 ◆서버에서 구동◆ 됩니다.
서버 템플릿 엔진을 이용한 화면 생성은 ◆서버에서 Java 코드로 문자열◆을 만든 뒤 이 문자열을 HTML로 변환하여 ◆브라우저로 전달◆합니다. 앞선 코드는 HTML을 만드는 과정에서 System.out.println("test");를 실행할 뿐이며 자바스크립트 코드는 단순한 문자열일 뿐입니다.

반면에 자바스크립트는 ◆브라우저 웨이서 작동◆ 합니다. 앞에서 작성된 자바스크립트 코드가 실행되는 장소는 서버가 아닌 ◆브라우저◆입니다. 즉, 브라우저에서 작동될 때는 서버 템플릿 엔진의 손을 벗어나 제어할 수가 없습니다. 흔히 이야기하는 Vue.s나 React.js를 이용한 SPA(Single Page Application) 는 ◆브라우저에서 화면을 생성◆합니다. 즉, ◆서버에서 이미 코드가 벗어난 경우◆ 입니다. 그래서 다음과 같이 서버에서는 Json 혹은 Xml 형식의 데이터만 전달하고 클라이언트에서 조립합니다.
----------------------------------------------------------------------------------------------------------------------------------------------

p.138 머스테치 용법
{{>layout/header}}
- {{>}}는 현재 머스테치 파일을 기준으로 다른 파일을 가져옵니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.146 머스테치의 문법
{{#posts}}
- posts 라는 List를 순회 합니다.
- Java 의 for문과 동일하게 생각하면 됩니다.
{{#id}} 등의 {{변수명}}
- List에서 뽑아낸 객체의 필드를 사용합니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.153 머스테치의 문법
{{posts.id}}
- 머스테치는 객체의 필드 접근 시 점으로 구분합니다.
- 즉, Post클래스의 id에 대한 접근은 post.id로 사용할 수 있습니다.

----------------------------------------------------------------------------------------------------------------------------------------------

p.154 index.js update 이벤트 작성
$('#btn-update').on('click')
- btn-update란 id를 가진 HTML 엘리먼트에 click 이벤트가 발생할 때 update function을 실행하도록 이벤트를 등록합니다.

update : function()
- 신규로 추가될 update function 입니다.

type:'PUT'
- 여러 HTTP Method 중 PUT 메소드를 선택합니다.
- PostsApiController에 있는 API에서 이미 @PutMapping으로 선언했기 때문에 PUT을 사용해야 합니다. 참고로 이는 Rest규약에 맞게 설정된 것입니다.
- Rest에서 CRUD는 다음과 같이 HTTP Method에 매핑됩니다.
 생성 (Create) - POST
 읽기 (Read) - GET
 수정 (Update) -PUT
 삭제 (Delete) - DELETE

url:'/api/v1/posts/'+id
- 어느 게시글을 수정할지 URL Path로 구분하기 위해 Path에 id를 추가합니다.
----------------------------------------------------------------------------------------------------------------------------------------------